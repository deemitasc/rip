diff --git a/Indexer/Action/Base.php b/Indexer/Action/Base.php
index e7edcae..d761f38 100644
--- a/Indexer/Action/Base.php
+++ b/Indexer/Action/Base.php
@@ -37,11 +37,13 @@ class Base implements ActionInterface

     /**
      * @var AdapterInterface
+     * @deprecated
      */
     protected $connection;

     /**
      * @var SourceProviderInterface[]
+     * @deprecated
      */
     protected $sources;

@@ -52,6 +54,7 @@ class Base implements ActionInterface

     /**
      * @var HandlerInterface[]
+     * @deprecated
      */
     protected $handlers;

@@ -62,6 +65,7 @@ class Base implements ActionInterface

     /**
      * @var array
+     * @deprecated
      */
     protected $columnTypesMap = [
         'varchar'    => ['type' => Table::TYPE_TEXT, 'size' => 255],
@@ -71,11 +75,13 @@ class Base implements ActionInterface

     /**
      * @var array
+     * @deprecated
      */
     protected $filterColumns;

     /**
      * @var array
+     * @deprecated
      */
     protected $searchColumns;

@@ -96,6 +102,7 @@ class Base implements ActionInterface

     /**
      * @var String
+     * @deprecated
      */
     protected $string;

@@ -106,11 +113,13 @@ class Base implements ActionInterface

     /**
      * @var array
+     * @deprecated
      */
     protected $filterable = [];

     /**
      * @var array
+     * @deprecated
      */
     protected $searchable = [];

@@ -272,6 +281,7 @@ class Base implements ActionInterface
     protected function createResultCollection()
     {
         $select = $this->getPrimaryResource()->getSelect();
+        $select->reset(\Magento\Framework\DB\Select::COLUMNS);
         $select->columns($this->getPrimaryResource()->getIdFieldName());
         foreach ($this->data['fieldsets'] as $fieldset) {
             if (isset($fieldset['references'])) {
@@ -342,6 +352,8 @@ class Base implements ActionInterface
      *
      * @param array $field
      * @return void
+     *
+     * @deprecated
      */
     protected function saveFieldByType($field)
     {
diff --git a/Indexer/Action/Entity.php b/Indexer/Action/Entity.php
index e88d281..b8390b9 100644
--- a/Indexer/Action/Entity.php
+++ b/Indexer/Action/Entity.php
@@ -24,6 +24,6 @@ class Entity extends Base
     {
         return !count($ids)
             ? $this->createResultCollection()
-            : $this->createResultCollection()->addFieldToFilter($this->getPrimaryResource()->getRowIdFieldName(), $ids);
+            : $this->createResultCollection()->addFieldToFilter($this->getPrimaryResource()->getIdFieldName(), $ids);
     }
 }
diff --git a/Indexer/SaveHandler/Batch.php b/Indexer/SaveHandler/Batch.php
index 31883fa..7d53e55 100644
--- a/Indexer/SaveHandler/Batch.php
+++ b/Indexer/SaveHandler/Batch.php
@@ -10,27 +10,23 @@ class Batch
     /**
      * @param \Traversable $documents
      * @param int $size
-     * @return array
+     * @return \Generator
      */
     public function getItems(\Traversable $documents, $size)
     {
-        if (count($documents) == 0) {
-            return [];
-        }
-
         $i = 0;
-        $batch = $items = [];
+        $batch = [];
+
         foreach ($documents as $documentName => $documentValue) {
             $batch[$documentName] = $documentValue;
-            if (++$i >= $size) {
-                $items[] = $batch;
+            if (++$i == $size) {
+                yield $batch;
                 $i = 0;
                 $batch = [];
             }
         }
         if (count($batch) > 0) {
-            $items[] = $batch;
+            yield $batch;
         }
-        return $items;
     }
 }
diff --git a/Indexer/Test/Unit/BatchTest.php b/Indexer/Test/Unit/BatchTest.php
index 0df9812..1571bba 100644
--- a/Indexer/Test/Unit/BatchTest.php
+++ b/Indexer/Test/Unit/BatchTest.php
@@ -27,7 +27,8 @@ class BatchTest extends \PHPUnit_Framework_TestCase
     public function testGetItems(array $itemsData, $size, array $expected)
     {
         $items = new \ArrayObject($itemsData);
-        $this->assertSame($expected, $this->object->getItems($items, $size));
+        $data = $this->object->getItems($items, $size);
+        $this->assertSame($expected, iterator_to_array($data));
     }
 
     /**

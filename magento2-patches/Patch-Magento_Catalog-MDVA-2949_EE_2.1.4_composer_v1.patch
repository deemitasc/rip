diff --git a/Controller/Adminhtml/Product/Initialization/Helper.php b/Controller/Adminhtml/Product/Initialization/Helper.php
index 520d313..7fe15b9 100644
--- a/Controller/Adminhtml/Product/Initialization/Helper.php
+++ b/Controller/Adminhtml/Product/Initialization/Helper.php
@@ -199,14 +199,18 @@ class Helper
             $customOptions = [];
             foreach ($options as $customOptionData) {
                 if (empty($customOptionData['is_delete'])) {
+                    if (empty($customOptionData['option_id'])) {
+                        $customOptionData['option_id'] = null;
+                    }
+
                     if (isset($customOptionData['values'])) {
                         $customOptionData['values'] = array_filter($customOptionData['values'], function ($valueData) {
                             return empty($valueData['is_delete']);
                         });
                     }
+
                     $customOption = $this->getCustomOptionFactory()->create(['data' => $customOptionData]);
                     $customOption->setProductSku($product->getSku());
-                    $customOption->setOptionId(null);
                     $customOptions[] = $customOption;
                 }
             }
@@ -315,21 +319,59 @@ class Helper
             return $productOptions;
         }
 
-        foreach ($productOptions as $index => $option) {
+        foreach ($productOptions as $optionIndex => $option) {
             $optionId = $option['option_id'];
+            $option = $this->overwriteValue(
+                $optionId,
+                $option,
+                $overwriteOptions
+            );
 
-            if (!isset($overwriteOptions[$optionId])) {
-                continue;
+            if (isset($option['values']) && isset($overwriteOptions[$optionId]['values'])) {
+                foreach ($option['values'] as $valueIndex => $value) {
+                    if (isset($value['option_type_id'])) {
+                        $valueId = $value['option_type_id'];
+                        $value = $this->overwriteValue(
+                            $valueId,
+                            $value,
+                            $overwriteOptions[$optionId]['values']
+                        );
+
+                        $option['values'][$valueIndex] = $value;
+                    }
+                }
             }
 
+            $productOptions[$optionIndex] = $option;
+        }
+
+        return $productOptions;
+    }
+
+    /**
+     * Overwrite values of fields to default, if there are option id and field
+     * name in array overwriteOptions
+     *
+     * @param int   $optionId
+     * @param array $option
+     * @param array $overwriteOptions
+     *
+     * @return array
+     */
+    private function overwriteValue($optionId, $option, $overwriteOptions)
+    {
+        if (isset($overwriteOptions[$optionId])) {
             foreach ($overwriteOptions[$optionId] as $fieldName => $overwrite) {
                 if ($overwrite && isset($option[$fieldName]) && isset($option['default_' . $fieldName])) {
-                    $productOptions[$index][$fieldName] = $option['default_' . $fieldName];
+                    $option[$fieldName] = $option['default_' . $fieldName];
+                    if ('title' == $fieldName) {
+                        $option['is_delete_store_title'] = 1;
+                    }
                 }
             }
         }
 
-        return $productOptions;
+        return $option;
     }
 
     /**
@@ -339,8 +381,9 @@ class Helper
     {
         if (null === $this->customOptionFactory) {
             $this->customOptionFactory = \Magento\Framework\App\ObjectManager::getInstance()
-                ->get('Magento\Catalog\Api\Data\ProductCustomOptionInterfaceFactory');
+                ->get(\Magento\Catalog\Api\Data\ProductCustomOptionInterfaceFactory::class);
         }
+
         return $this->customOptionFactory;
     }
 
@@ -351,7 +394,7 @@ class Helper
     {
         if (null === $this->productLinkFactory) {
             $this->productLinkFactory = \Magento\Framework\App\ObjectManager::getInstance()
-                ->get('Magento\Catalog\Api\Data\ProductLinkInterfaceFactory');
+                ->get(\Magento\Catalog\Api\Data\ProductLinkInterfaceFactory::class);
         }
         return $this->productLinkFactory;
     }
@@ -363,7 +406,7 @@ class Helper
     {
         if (null === $this->productRepository) {
             $this->productRepository = \Magento\Framework\App\ObjectManager::getInstance()
-                ->get('Magento\Catalog\Api\ProductRepositoryInterface\Proxy');
+                ->get(\Magento\Catalog\Api\ProductRepositoryInterface\Proxy::class);
         }
         return $this->productRepository;
     }
diff --git a/Model/Product/Option/Repository.php b/Model/Product/Option/Repository.php
index 3b3aa73..dc351d9 100644
--- a/Model/Product/Option/Repository.php
+++ b/Model/Product/Option/Repository.php
@@ -133,15 +133,57 @@ class Repository implements \Magento\Catalog\Api\ProductCustomOptionRepositoryIn
      */
     public function save(\Magento\Catalog\Api\Data\ProductCustomOptionInterface $option)
     {
+        /** @var string $productSku */
         $productSku = $option->getProductSku();
+
         if (!$productSku) {
             throw new CouldNotSaveException(__('ProductSku should be specified'));
         }
+
+        /** @var \Magento\Catalog\Model\Product $product */
         $product = $this->productRepository->get($productSku);
+
+        /** @var \Magento\Framework\EntityManager\EntityMetadataInterface $metadata */
         $metadata = $this->getMetadataPool()->getMetadata(ProductInterface::class);
+
         $option->setData('product_id', $product->getData($metadata->getLinkField()));
-        $option->setOptionId(null);
+        $option->setData('store_id', $product->getStoreId());
+
+        if ($option->getOptionId()) {
+
+            $options = $product->getOptions();
+
+            if (!$options) {
+                $options = $this->getProductOptions($product);
+            }
+
+            $persistedOption = array_filter(
+                $options,
+                function ($iOption) use ($option) {
+                    return $option->getOptionId() == $iOption->getOptionId();
+                }
+            );
+
+            $persistedOption = reset($persistedOption);
+
+            if (!$persistedOption) {
+                throw new NoSuchEntityException();
+            }
+
+            /** @var array $originalValues */
+            $originalValues = $persistedOption->getValues();
+
+            /** @var array $newValues */
+            $newValues = $option->getData('values');
+
+            if ($newValues) {
+                $newValues = $this->markRemovedValues($newValues, $originalValues);
+                $option->setData('values', $newValues);
+            }
+        }
+
         $option->save();
+
         return $option;
     }
 
diff --git a/Model/Product/Option/SaveHandler.php b/Model/Product/Option/SaveHandler.php
index 7c32232..6f3167a 100644
--- a/Model/Product/Option/SaveHandler.php
+++ b/Model/Product/Option/SaveHandler.php
@@ -20,7 +20,6 @@ class SaveHandler implements ExtensionInterface
 
     /**
      * @param OptionRepository $optionRepository
-     * @param MetadataPool $metadataPool
      */
     public function __construct(
         OptionRepository $optionRepository
@@ -30,21 +29,39 @@ class SaveHandler implements ExtensionInterface
 
     /**
      * @param object $entity
-     * @param array $arguments
+     * @param array  $arguments
+     *
      * @return \Magento\Catalog\Api\Data\ProductInterface|object
      * @SuppressWarnings(PHPMD.UnusedFormalParameter)
      */
     public function execute($entity, $arguments = [])
     {
+        $options = $entity->getOptions();
+        $optionIds = [];
+
+        if ($options) {
+            $optionIds = array_map(
+                function ($option) {
+                    /** @var \Magento\Catalog\Model\Product\Option $option */
+                    return $option->getOptionId();
+                },
+                $options
+            );
+        }
+
         /** @var \Magento\Catalog\Api\Data\ProductInterface $entity */
         foreach ($this->optionRepository->getProductOptions($entity) as $option) {
-            $this->optionRepository->delete($option);
+            if (!in_array($option->getOptionId(), $optionIds)) {
+                $this->optionRepository->delete($option);
+            }
         }
-        if ($entity->getOptions()) {
-            foreach ($entity->getOptions() as $option) {
+
+        if ($options) {
+            foreach ($options as $option) {
                 $this->optionRepository->save($option);
             }
         }
+
         return $entity;
     }
 }
diff --git a/Model/Product/Option/Validator/Select.php b/Model/Product/Option/Validator/Select.php
index ba7103a..38215c8 100644
--- a/Model/Product/Option/Validator/Select.php
+++ b/Model/Product/Option/Validator/Select.php
@@ -51,6 +51,10 @@ class Select extends DefaultValidator
             $storeId = $option->getProduct()->getStoreId();
         }
         foreach ($values as $value) {
+            if (isset($value['is_delete']) && (bool)$value['is_delete']) {
+                continue;
+            }
+
             $type = isset($value['price_type']) ? $value['price_type'] : null;
             $price = isset($value['price']) ? $value['price'] : null;
             $title = isset($value['title']) ? $value['title'] : null;
diff --git a/Model/Product/Option/Value.php b/Model/Product/Option/Value.php
index 7a71c67..056142e 100644
--- a/Model/Product/Option/Value.php
+++ b/Model/Product/Option/Value.php
@@ -200,7 +200,7 @@ class Value extends AbstractModel implements \Magento\Catalog\Api\Data\ProductCu
                 'store_id',
                 $this->getOption()->getStoreId()
             );
-            $this->unsetData('option_type_id');
+
             if ($this->getData('is_delete') == '1') {
                 if ($this->getId()) {
                     $this->deleteValues($this->getId());
diff --git a/Model/ResourceModel/Product/Option.php b/Model/ResourceModel/Product/Option.php
index 3d123f2..00efc41 100644
--- a/Model/ResourceModel/Product/Option.php
+++ b/Model/ResourceModel/Product/Option.php
@@ -6,6 +6,7 @@
 namespace Magento\Catalog\Model\ResourceModel\Product;
 
 use Magento\Catalog\Api\Data\ProductInterface;
+use Magento\Store\Model\Store;
 
 /**
  * Catalog product custom option resource model
@@ -122,7 +123,7 @@ class Option extends \Magento\Framework\Model\ResourceModel\Db\AbstractDb
                     $object->getId()
                 )->where(
                     'store_id = ?',
-                    \Magento\Store\Model\Store::DEFAULT_STORE_ID
+                    Store::DEFAULT_STORE_ID
                 );
                 $optionId = $connection->fetchOne($statement);
 
@@ -139,7 +140,7 @@ class Option extends \Magento\Framework\Model\ResourceModel\Db\AbstractDb
                         $data,
                         [
                             'option_id = ?' => $object->getId(),
-                            'store_id  = ?' => \Magento\Store\Model\Store::DEFAULT_STORE_ID
+                            'store_id  = ?' => Store::DEFAULT_STORE_ID
                         ]
                     );
                 } else {
@@ -147,7 +148,7 @@ class Option extends \Magento\Framework\Model\ResourceModel\Db\AbstractDb
                         new \Magento\Framework\DataObject(
                             [
                                 'option_id' => $object->getId(),
-                                'store_id' => \Magento\Store\Model\Store::DEFAULT_STORE_ID,
+                                'store_id' => Store::DEFAULT_STORE_ID,
                                 'price' => $object->getPrice(),
                                 'price_type' => $object->getPriceType(),
                             ]
@@ -159,11 +160,11 @@ class Option extends \Magento\Framework\Model\ResourceModel\Db\AbstractDb
             }
 
             $scope = (int)$this->_config->getValue(
-                \Magento\Store\Model\Store::XML_PATH_PRICE_SCOPE,
+                Store::XML_PATH_PRICE_SCOPE,
                 \Magento\Store\Model\ScopeInterface::SCOPE_STORE
             );
 
-            if ($object->getStoreId() != '0' && $scope == \Magento\Store\Model\Store::PRICE_SCOPE_WEBSITE) {
+            if ($object->getStoreId() != '0' && $scope == Store::PRICE_SCOPE_WEBSITE) {
                 $baseCurrency = $this->_config->getValue(
                     \Magento\Directory\Model\Currency::XML_PATH_CURRENCY_BASE,
                     'default'
@@ -222,7 +223,7 @@ class Option extends \Magento\Framework\Model\ResourceModel\Db\AbstractDb
                         }
                     }
                 }
-            } elseif ($scope == \Magento\Store\Model\Store::PRICE_SCOPE_WEBSITE && $object->getData('scope', 'price')
+            } elseif ($scope == Store::PRICE_SCOPE_WEBSITE && $object->getData('scope', 'price')
             ) {
                 $connection->delete(
                     $priceTable,
@@ -245,16 +246,19 @@ class Option extends \Magento\Framework\Model\ResourceModel\Db\AbstractDb
     {
         $connection = $this->getConnection();
         $titleTableName = $this->getTable('catalog_product_option_title');
-        foreach ([\Magento\Store\Model\Store::DEFAULT_STORE_ID, $object->getStoreId()] as $storeId) {
+        foreach ([Store::DEFAULT_STORE_ID, $object->getStoreId()] as $storeId) {
             $existInCurrentStore = $this->getColFromOptionTable($titleTableName, (int)$object->getId(), (int)$storeId);
-            $existInDefaultStore = $this->getColFromOptionTable(
-                $titleTableName,
-                (int)$object->getId(),
-                \Magento\Store\Model\Store::DEFAULT_STORE_ID
-            );
+            $existInDefaultStore = (int)$storeId == Store::DEFAULT_STORE_ID ?
+                $existInCurrentStore :
+                $this->getColFromOptionTable($titleTableName, (int)$object->getId(), Store::DEFAULT_STORE_ID);
+
             if ($object->getTitle()) {
+                $isDeleteStoreTitle = (bool)$object->getData('is_delete_store_title');
                 if ($existInCurrentStore) {
-                    if ($object->getStoreId() == $storeId) {
+                    if ($isDeleteStoreTitle && (int)$storeId != Store::DEFAULT_STORE_ID) {
+                        $connection->delete($titleTableName, ['option_title_id = ?' => $existInCurrentStore]);
+
+                    } elseif ($object->getStoreId() == $storeId) {
                         $data = $this->_prepareDataForTable(
                             new \Magento\Framework\DataObject(['title' => $object->getTitle()]),
                             $titleTableName
@@ -270,8 +274,12 @@ class Option extends \Magento\Framework\Model\ResourceModel\Db\AbstractDb
                     }
                 } else {
                     // we should insert record into not default store only of if it does not exist in default store
-                    if (($storeId == \Magento\Store\Model\Store::DEFAULT_STORE_ID && !$existInDefaultStore)
-                        || ($storeId != \Magento\Store\Model\Store::DEFAULT_STORE_ID && !$existInCurrentStore)
+                    if (($storeId == Store::DEFAULT_STORE_ID && !$existInDefaultStore) ||
+                        (
+                            $storeId != Store::DEFAULT_STORE_ID &&
+                            !$existInCurrentStore &&
+                            !$isDeleteStoreTitle
+                        )
                     ) {
                         $data = $this->_prepareDataForTable(
                             new \Magento\Framework\DataObject(
@@ -287,7 +295,7 @@ class Option extends \Magento\Framework\Model\ResourceModel\Db\AbstractDb
                     }
                 }
             } else {
-                if ($object->getId() && $object->getStoreId() > \Magento\Store\Model\Store::DEFAULT_STORE_ID
+                if ($object->getId() && $object->getStoreId() > Store::DEFAULT_STORE_ID
                     && $storeId
                 ) {
                     $connection->delete(
@@ -466,7 +474,7 @@ class Option extends \Magento\Framework\Model\ResourceModel\Db\AbstractDb
                 'option_title_default.option_id=product_option.option_id',
                 $connection->quoteInto(
                     'option_title_default.store_id = ?',
-                    \Magento\Store\Model\Store::DEFAULT_STORE_ID
+                    Store::DEFAULT_STORE_ID
                 )
             ]
         );
@@ -513,7 +521,7 @@ class Option extends \Magento\Framework\Model\ResourceModel\Db\AbstractDb
                 'option_title_default.option_type_id=option_type.option_type_id',
                 $connection->quoteInto(
                     'option_title_default.store_id = ?',
-                    \Magento\Store\Model\Store::DEFAULT_STORE_ID
+                    Store::DEFAULT_STORE_ID
                 )
             ]
         );
@@ -567,7 +575,7 @@ class Option extends \Magento\Framework\Model\ResourceModel\Db\AbstractDb
     {
         if (null === $this->metadataPool) {
             $this->metadataPool = \Magento\Framework\App\ObjectManager::getInstance()
-                ->get('Magento\Framework\EntityManager\MetadataPool');
+                ->get(\Magento\Framework\EntityManager\MetadataPool::class);
         }
         return $this->metadataPool;
     }
diff --git a/Model/ResourceModel/Product/Option/Value.php b/Model/ResourceModel/Product/Option/Value.php
index 39a67f9..0ec4b03 100644
--- a/Model/ResourceModel/Product/Option/Value.php
+++ b/Model/ResourceModel/Product/Option/Value.php
@@ -231,6 +231,13 @@ class Value extends \Magento\Framework\Model\ResourceModel\Db\AbstractDb
             );
             $optionTypeId = $this->getConnection()->fetchOne($select);
             $existInCurrentStore = $this->getOptionIdFromOptionTable($titleTable, (int)$object->getId(), (int)$storeId);
+
+            if ($storeId != \Magento\Store\Model\Store::DEFAULT_STORE_ID &&
+                $object->getData('is_delete_store_title')
+            ) {
+                $object->unsetData('title');
+            }
+
             if ($object->getTitle()) {
                 if ($existInCurrentStore) {
                     if ($storeId == $object->getStoreId()) {
diff --git a/Ui/DataProvider/Product/Form/Modifier/CustomOptions.php b/Ui/DataProvider/Product/Form/Modifier/CustomOptions.php
index 7bf3205..02337fa 100644
--- a/Ui/DataProvider/Product/Form/Modifier/CustomOptions.php
+++ b/Ui/DataProvider/Product/Form/Modifier/CustomOptions.php
@@ -68,6 +68,7 @@ class CustomOptions extends AbstractModifier
     const FIELD_ENABLE = 'affect_product_custom_options';
     const FIELD_OPTION_ID = 'option_id';
     const FIELD_TITLE_NAME = 'title';
+    const FIELD_STORE_TITLE_NAME = 'store_title';
     const FIELD_TYPE_NAME = 'type';
     const FIELD_IS_REQUIRE_NAME = 'is_require';
     const FIELD_SORT_ORDER_NAME = 'sort_order';
@@ -79,6 +80,7 @@ class CustomOptions extends AbstractModifier
     const FIELD_IMAGE_SIZE_X_NAME = 'image_size_x';
     const FIELD_IMAGE_SIZE_Y_NAME = 'image_size_y';
     const FIELD_IS_DELETE = 'is_delete';
+    const FIELD_IS_USE_DEFAULT = 'is_use_default';
     /**#@-*/
 
     /**#@+
@@ -162,9 +164,15 @@ class CustomOptions extends AbstractModifier
 
         /** @var \Magento\Catalog\Model\Product\Option $option */
         foreach ($productOptions as $index => $option) {
-            $options[$index] = $this->formatPriceByPath(static::FIELD_PRICE_NAME, $option->getData());
+            $optionData = $option->getData();
+            $optionData[static::FIELD_IS_USE_DEFAULT] = !$option->getData(static::FIELD_STORE_TITLE_NAME);
+            $options[$index] = $this->formatPriceByPath(static::FIELD_PRICE_NAME, $optionData);
             $values = $option->getValues() ?: [];
 
+            foreach ($values as $value) {
+                $value->setData(static::FIELD_IS_USE_DEFAULT, !$value->getData(static::FIELD_STORE_TITLE_NAME));
+            }
+
             /** @var \Magento\Catalog\Model\Product\Option $value */
             foreach ($values as $value) {
                 $options[$index][static::GRID_TYPE_SELECT_NAME][] = $this->formatPriceByPath(
@@ -386,6 +394,7 @@ class CustomOptions extends AbstractModifier
                                 'data' => [
                                     'config' => [
                                         'componentType' => Fieldset::NAME,
+                                        'collapsible' => true,
                                         'label' => null,
                                         'sortOrder' => 10,
                                         'opened' => true,
@@ -477,7 +486,6 @@ class CustomOptions extends AbstractModifier
                                 'ns' => static::CUSTOM_OPTIONS_LISTING,
                                 'render_url' => $this->urlBuilder->getUrl('mui/index/render'),
                                 'realTimeLink' => true,
-                                'behaviourType' => 'edit',
                                 'externalFilterMode' => false,
                                 'currentProductId' => $this->locator->getProduct()->getId(),
                                 'dataLinks' => [
@@ -529,7 +537,8 @@ class CustomOptions extends AbstractModifier
                                     'component' => 'Magento_Catalog/component/static-type-input',
                                     'valueUpdate' => 'input',
                                     'imports' => [
-                                        'optionId' => '${ $.provider }:${ $.parentScope }.option_id'
+                                        'optionId' => '${ $.provider }:${ $.parentScope }.option_id',
+                                        'isUseDefault' => '${ $.provider }:${ $.parentScope }.is_use_default'
                                     ]
                                 ],
                             ],
@@ -597,6 +606,23 @@ class CustomOptions extends AbstractModifier
      */
     protected function getSelectTypeGridConfig($sortOrder)
     {
+        $options = [
+            'arguments' => [
+                'data' => [
+                    'config' => [
+                        'imports' => [
+                            'optionId' => '${ $.provider }:${ $.parentScope }.option_id',
+                            'optionTypeId' => '${ $.provider }:${ $.parentScope }.option_type_id',
+                            'isUseDefault' => '${ $.provider }:${ $.parentScope }.is_use_default'
+                        ],
+                        'service' => [
+                            'template' => 'Magento_Catalog/form/element/helper/custom-option-type-service',
+                        ],
+                    ],
+                ],
+            ],
+        ];
+
         return [
             'arguments' => [
                 'data' => [
@@ -626,7 +652,10 @@ class CustomOptions extends AbstractModifier
                         ],
                     ],
                     'children' => [
-                        static::FIELD_TITLE_NAME => $this->getTitleFieldConfig(10),
+                        static::FIELD_TITLE_NAME => $this->getTitleFieldConfig(
+                            10,
+                            $this->locator->getProduct()->getStoreId() ? $options : []
+                        ),
                         static::FIELD_PRICE_NAME => $this->getPriceFieldConfig(20),
                         static::FIELD_PRICE_TYPE_NAME => $this->getPriceTypeFieldConfig(30, ['fit' => true]),
                         static::FIELD_SKU_NAME => $this->getSkuFieldConfig(40),
diff --git a/view/adminhtml/web/template/form/element/helper/custom-option-type-service.html b/view/adminhtml/web/template/form/element/helper/custom-option-type-service.html
new file mode 100644
index 0000000..442d96b
--- /dev/null
+++ b/view/adminhtml/web/template/form/element/helper/custom-option-type-service.html
@@ -0,0 +1,17 @@
+<!--
+/**
+ * Copyright © 2016 Magento. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+-->
+<div class="admin__field-service">
+    <input type="checkbox"
+           class="admin__control-checkbox"
+           attr="
+                id: $data.uid + '_default',
+                name: 'options_use_default[' + $data.optionId + '][values][' + $data.optionTypeId + '][' + $data.index + ']',
+                'data-form-part': $data.ns
+           "
+           ko-checked="$data.isUseDefault">
+    <label translate="'Use Default Value'" attr="for: $data.uid + '_default'" class="admin__field-label"></label>
+</div>
